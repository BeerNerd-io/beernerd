document.addEventListener("DOMContentLoaded",(()=>{const projectForm=document.getElementById("project-form");const projectsList=document.getElementById("projects");let projects=JSON.parse(localStorage.getItem("projects"))||[];function renderProjects(){projectsList.innerHTML="";projects.forEach(((project,index)=>{const projectElement=createProjectElement(project,index);projectsList.appendChild(projectElement)}))}function createProjectElement(project,index){const projectElement=document.createElement("div");projectElement.className="project-card";projectElement.innerHTML=`\n            <h2 class="project-title">${escapeHtml(project.title)}</h2>\n            <p>${escapeHtml(project.description)}</p>\n            <p>Due: ${escapeHtml(project.dueDate)}</p>\n            ${createListHtml("Tasks",project.tasks)}\n            ${createListHtml("Parts",project.parts)}\n            ${createListHtml("Tools",project.tools)}\n            ${createListHtml("Resources",project.resources)}\n            ${createListHtml("Progress Log",project.progressLog,false)}\n            <button onclick="editProject(${index})">Edit</button>\n            <button onclick="deleteProject(${index})">Delete</button>\n        `;return projectElement}function createListHtml(title,items,hasLink=true){return`\n            <h3>${escapeHtml(title)}:</h3>\n            <ul>${items.map((item=>`<li>${escapeHtml(hasLink?item.name:item)} ${hasLink&&item.link?`<a href="${escapeHtml(item.link)}" target="_blank">(Link)</a>`:""}</li>`)).join("")}</ul>\n        `}function escapeHtml(unsafe){return unsafe.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}function addProject(project){projects.push(project);localStorage.setItem("projects",JSON.stringify(projects));renderProjects()}window.deleteProject=function(index){projects.splice(index,1);localStorage.setItem("projects",JSON.stringify(projects));renderProjects()};function setupItemAdder(containerId,inputId,linkId,addButtonId){const container=document.getElementById(containerId);const input=document.getElementById(inputId);const linkInput=document.getElementById(linkId);const addButton=document.getElementById(addButtonId);const items=[];if(!container||!input||!linkInput||!addButton){console.error(`One or more elements not found for ${containerId}`);return items}addButton.addEventListener("click",(()=>{const name=input.value.trim();const link=linkInput.value.trim();if(name!==""){const item={name:name,link:link};items.push(item);const itemElement=document.createElement("div");itemElement.textContent=`${name} ${link?`(Link: ${link})`:""}`;container.appendChild(itemElement);input.value="";linkInput.value=""}}));return items}const tasks=setupItemAdder("tasks-container","task-input","task-link","add-task");const parts=setupItemAdder("parts-container","part-input","part-link","add-part");const tools=setupItemAdder("tools-container","tool-input","tool-link","add-tool");const resources=setupItemAdder("resources-container","resource-input","resource-link","add-resource");const progressContainer=document.getElementById("progress-container");const progressInput=document.getElementById("progress-input");const addProgressButton=document.getElementById("add-progress");const progressLog=[];if(progressContainer&&progressInput&&addProgressButton){addProgressButton.addEventListener("click",(()=>{const note=progressInput.value.trim();if(note!==""){progressLog.push(note);const progressElement=document.createElement("div");progressElement.textContent=note;progressContainer.appendChild(progressElement);progressInput.value=""}}))}else{console.error("One or more progress elements not found")}if(projectForm){projectForm.addEventListener("submit",(e=>{e.preventDefault();const titleInput=document.getElementById("project-title");const descriptionInput=document.getElementById("project-description");const dueDateInput=document.getElementById("project-due-date");if(!titleInput||!descriptionInput||!dueDateInput){console.error("One or more required inputs not found");return}const newProject={title:titleInput.value,description:descriptionInput.value,dueDate:dueDateInput.value,tasks:tasks.slice(),parts:parts.slice(),tools:tools.slice(),resources:resources.slice(),progressLog:progressLog.slice()};addProject(newProject);projectForm.reset();[tasks,parts,tools,resources,progressLog].forEach((arr=>arr.length=0));["tasks-container","parts-container","tools-container","resources-container","progress-container"].forEach((id=>{const container=document.getElementById(id);if(container)container.innerHTML=""}))}))}else{console.error("Project form not found")}renderProjects();const editModal=document.getElementById("edit-modal");const editProjectForm=document.getElementById("edit-project-form");const closeModalSpan=document.querySelector(".close");window.editProject=function(index){const project=projects[index];editProjectForm.innerHTML=`\n            <div class="form-group">\n                <label for="edit-project-title">Project Title</label>\n                <input type="text" id="edit-project-title" value="${escapeHtml(project.title)}" required>\n            </div>\n            <div class="form-group">\n                <label for="edit-project-description">Description</label>\n                <textarea id="edit-project-description" required>${escapeHtml(project.description)}</textarea>\n            </div>\n            <div class="form-group">\n                <label for="edit-project-due-date">Due Date</label>\n                <input type="date" id="edit-project-due-date" value="${project.dueDate}" required>\n            </div>\n            ${createEditListHtml("Tasks",project.tasks)}\n            ${createEditListHtml("Parts",project.parts)}\n            ${createEditListHtml("Tools",project.tools)}\n            ${createEditListHtml("Resources",project.resources)}\n            ${createEditListHtml("Progress Log",project.progressLog,false)}\n            <button type="submit">Save Changes</button>\n        `;editProjectForm.dataset.projectIndex=index;editModal.style.display="block"};function createEditListHtml(title,items,hasLink=true){const lowercaseTitle=title.toLowerCase().replace(" ","-");return`\n            <div class="form-group">\n                <label for="edit-${lowercaseTitle}-container">${title}</label>\n                <div id="edit-${lowercaseTitle}-container">\n                    ${items.map(((item,index)=>`\n                        <div>\n                            <input type="text" id="edit-${lowercaseTitle}-name-${index}" name="edit-${lowercaseTitle}-name-${index}" value="${escapeHtml(hasLink?item.name:item)}" data-index="${index}">\n                            ${hasLink?`<input type="text" id="edit-${lowercaseTitle}-link-${index}" name="edit-${lowercaseTitle}-link-${index}" value="${escapeHtml(item.link||"")}" data-index="${index}">`:""}\n                            <button type="button" onclick="removeEditItem('${lowercaseTitle}', ${index})">Remove</button>\n                        </div>\n                    `)).join("")}\n                </div>\n                <input type="text" id="edit-${lowercaseTitle}-input" name="edit-${lowercaseTitle}-input" placeholder="Enter ${title.toLowerCase()}">\n                ${hasLink?`<input type="text" id="edit-${lowercaseTitle}-link" name="edit-${lowercaseTitle}-link" placeholder="${title} link (optional)">`:""}\n                <button type="button" onclick="addEditItem('${lowercaseTitle}')">Add ${title}</button>\n            </div>\n        `}window.addEditItem=function(type){const container=document.getElementById(`edit-${type}-container`);const input=document.getElementById(`edit-${type}-input`);const linkInput=document.getElementById(`edit-${type}-link`);const name=input.value.trim();const link=linkInput?linkInput.value.trim():"";if(name!==""){const itemElement=document.createElement("div");itemElement.innerHTML=`\n                <input type="text" value="${escapeHtml(name)}" data-index="${container.children.length}">\n                ${linkInput?`<input type="text" value="${escapeHtml(link)}" data-index="${container.children.length}">`:""}\n                <button type="button" onclick="removeEditItem('${type}', ${container.children.length})">Remove</button>\n            `;container.appendChild(itemElement);input.value="";if(linkInput)linkInput.value=""}};window.removeEditItem=function(type,index){const container=document.getElementById(`edit-${type}-container`);container.removeChild(container.children[index]);Array.from(container.children).forEach(((child,i)=>{child.querySelector("input").dataset.index=i;const linkInput=child.querySelector("input:nth-child(2)");if(linkInput)linkInput.dataset.index=i;child.querySelector("button").setAttribute("onclick",`removeEditItem('${type}', ${i})`)}))};editProjectForm.addEventListener("submit",(e=>{e.preventDefault();const index=parseInt(editProjectForm.dataset.projectIndex);const updatedProject={title:document.getElementById("edit-project-title").value,description:document.getElementById("edit-project-description").value,dueDate:document.getElementById("edit-project-due-date").value,tasks:getEditedItems("tasks"),parts:getEditedItems("parts"),tools:getEditedItems("tools"),resources:getEditedItems("resources"),progressLog:getEditedItems("progress-log",false)};projects[index]=updatedProject;localStorage.setItem("projects",JSON.stringify(projects));renderProjects();editModal.style.display="none"}));function getEditedItems(type,hasLink=true){const container=document.getElementById(`edit-${type}-container`);if(!container){console.error(`Container not found for ${type}`);return[]}return Array.from(container.children).map((child=>{const nameInput=child.querySelector("input");const linkInput=child.querySelector("input:nth-child(2)");return hasLink?{name:nameInput.value,link:linkInput?linkInput.value:""}:nameInput.value}))}closeModalSpan.onclick=()=>{editModal.style.display="none"};window.onclick=event=>{if(event.target==editModal){editModal.style.display="none"}}}));